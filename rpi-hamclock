#!/bin/bash

# initialize script
function initialize {
    #echo "-> init #$# ($*)"

    # find script location on machine
    local script_path="${BASH_SOURCE}"
    while [ -L "${script_path}" ]; do
        local script_dir="$(cd -P "$(dirname "${script_path}")" >/dev/null 2>&1 && pwd)"
        script_path="$(readlink "${script_path}")"
        [[ ${script_path} != /* ]] && script_path="${script_dir}/${script_path}"
    done
    script_path="$(readlink -f "${script_path}")"
    script_dir="$(cd -P "$(dirname -- "${script_path}")" >/dev/null 2>&1 && pwd)"

    # set HAMCLOCK_HOME as working directory
    HAMCLOCK_HOME=$script_dir
    cd $HAMCLOCK_HOME

    # source default configuration config file if available
    [ -f "rpi-hamlock.conf.template" ] && . rpi-hamlock.conf.template

    # source a config file if available
    [ -f "rpi-hamlock.conf" ] && . rpi-hamlock.conf

    # set default values if nothing set
    : ${HAMCLOCK_RPIHAMCLOCK_GIT_URL:=https://github.com/bubiwahn/rpi-hamclock-web.git}  
    : ${HAMCLOCK_ESPHAMCLOCK_ZIP_URL:=https://www.clearskyinstitute.com/ham/HamClock/ESPHamClock.zip}
    : ${HAMCLOCK_BUILD_TARGET:=hamclock-web-1600x960}
    : ${HAMCLOCK_DESKTOP_DIR:=~/Desktop}
    : ${HAMCLOCK_DESKTOP_FILE:=hamclock.desktop}
    : ${HAMCLOCK_AUTOSTART_DIR:=~/.config/autostart}
}

# show configuration config
function config {
    #echo "-> config #$# ($*)"
    echo "rpi-hamclock configuration ..."

    cat << EOM
HAMCLOCK_HOME:                  '${HAMCLOCK_HOME}'
HAMCLOCK_RPIHAMCLOCK_GIT_URL:   '${HAMCLOCK_RPIHAMCLOCK_GIT_URL}'
HAMCLOCK_ESPHAMCLOCK_ZIP_URL:   '${HAMCLOCK_ESPHAMCLOCK_ZIP_URL}'
HAMCLOCK_BUILD_TARGET:          '${HAMCLOCK_BUILD_TARGET}'
HAMCLOCK_DESKTOP_DIR:           '${HAMCLOCK_DESKTOP_DIR}'
HAMCLOCK_DESKTOP_FILE:          '${HAMCLOCK_DESKTOP_FILE}'
HAMCLOCK_AUTOSTART_DIR:         '${HAMCLOCK_AUTOSTART_DIR}'
EOM
    echo "done."
    exit 0
}

# display command line help and exit with code 1
function help {

    cat << EOM 
Web based ESPHamClock on Raspberry Pi install and admin tool.

usage:
rpi-hamclock [OPTIONS] <TASK>

<TASK> is one of:
    update [-p]         -> update latest software release
                            -p = git pull latest version of rpi-hamclock  
    install [-d [-a]]   -> install software on machine, where
                            -d = install desktop lauchcher
                            -a = turn of autorun (default=off)
    start [-s]          -> start service, where
                            -s = show HamClock on local desktop
    stop                -> stop service
    config              -> show configuration
EOM
    exit 1
}

function install {
    # echo "-> install #$# ($*)"
    echo "install hamclock with options "$*" ..."

    # install hamclock
    pushd ESPHamClock
    sudo make install
    popd

    # create desktop launcher if requested
    local desktop_dir=$HAMCLOCK_DESKTOP_DIR
    local desktop_path=$desktop_dir/$HAMCLOCK_DESKTOP_FILE
    [ "$1" = "-d" ] && {

        mkdir -p $desktop_dir
        cat << EOF > $desktop_path
[Desktop Entry]
Name=HamClock
Exec=$HAMCLOCK_HOME/rpi-hamclock start -s
Icon=$HAMCLOCK_HOME/ESPHamClock/hamclock.png
Terminal=false
Type=Application
EOF
        chmod u+x $desktop_path
    }

    # toggle autostart on/off if requested
    local autostart_dir=$HAMCLOCK_AUTOSTART_DIR
    local autostart_link=$autostart_dir/$HAMCLOCK_DESKTOP_FILE
    if [ "$2" = "-a" ] ; then
        mkdir -p $autostart_dir
        ln -s --target-directory=$autostart_dir $desktop_path
    else
        [ -f  $autostart_link ] && rm -f $autostart_link   
    fi

    echo "done."
    exit 0
}

# software update process
function update {
    #echo "-> update #$# ($*)"

    # if "-p" then git pull rpi-hamclock
    if [ "$1" = "-p" ] ; then
        echo "git pull... "

        git pull

        echo "done."
        exit 0
    fi

    echo "update with options "$*" ..."

    # download hamclock software
    sudo apt install curl unzip g++ surf
    rm -rf ESPHamClock
    curl -O $HAMCLOCK_ESPHAMCLOCK_ZIP_URL
    unzip ESPHamClock.zip

    # build software
    pushd ESPHamClock
    make -j 4 ${HAMCLOCK_BUILD_TARGET}
    popd

    echo "done."
    exit 0
}

function start {
    #echo "-> start #$# ($*)"
    echo "start with options "$*" ..."

    local hamclock_url=http://localhost:8081/live.html
    local delay=1

    # wait the desktop system
    sleep 3

    if [ "$1" = "-s" ] ; then
        
        # launch browser
        echo "launch browser ..."
        surf -F $hamclock_url & local surf_pid=$!
        echo "pid=$surf_pid."

        # wait for browser ...
        sleep 10
    fi

    # launch hamclock
    echo "launch hamclock ..."
    hamclock &
    echo "pid=$!"

    # wait for hamclock page
    curl_error=1
    until [ "${curl_error}" -eq "0" ] ; do
	    echo "check hamclock ..."
	    sleep $delay
	    curl -s $hamclock_url > /dev/null
	    curl_error=$?
    done
    echo "hamclock is up :-)"

    # reload page if browser is running
    [ -n "$surf_pid" ] && kill -HUP $surf_pid

    echo "done."
    exit 0
}

function stop {
    #echo "-> stop #$# ($*)"
    echo "stop ..."

    killall -q surf hamclock
 
    echo "done."
    exit 0
}

function dispatch {
    #echo "-> dispatch #$# ($*)"

    case "$1" in

    stop | config )
        [ "$#" = "1" ] && $1
        help
    ;;

    update )
        [ "$#" = "2" ] && [ "$2" = "-p" ] && $1 "$2"
        [ "$#" = "1" ] && $1
        help
    ;;

    start )
        [ "$#" = "2" ] && [ "$2" = "-s" ] && $1 "$2"
        [ "$#" = "1" ] && $1
        help
    ;;

    install )
        [ "$#" = "3" ] && [ "$2" = "-d" ] && [ "$3" = "-a" ] && $1 "$2" "$3"
        [ "$#" = "2" ] && [ "$2" = "-d" ] && $1 "$2"
        [ "$#" = "1" ] && $1
        help
    ;;

    *)
        help
    ;;
    
    esac
}

initialize
dispatch "$@"